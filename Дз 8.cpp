#include<iostream>

using namespace std;



/*
Задание №1
Создать структуру Point, содержащую два поля x, y типа float.
Создать и проинициализировать переменную типа Point.
Создать переменную типа Point и проинициализировать ее данными с клавиатуры.
Вывести на экран значения x, y вышеобъявленных переменных.
Написать программу, которая определеяет принадлежит ли заданная точка кругу заданного радиуса.
Координаты точки и радиус пользователь вводит с клавиатуры.
Для хранения координат точки использовать структуру Point.
Написать программу, которая по двум заданным точкам - концам отрезка находит точку середины отрезка.
Координаты точек пользователь вводит с клавиатуры.
Для хранения координат точек использовать структуру Point.
Рассчитанную точку середины отрезка также хранить как структуру Point.
Вывести координаты полученной точки в консоль.
*/
//struct Point
//{
//	float x;
//	float y;
//};
//
//int main()
//{
//	Point point;
//	cin >> point.x >> point.y;
//	cout << point.x << " " << point.y << endl;
//	unsigned short r;
//	cin >> r;
//	int gip = sqrt(point.x*point.x + point.y*point.y);
//	if(gip > r )
//	{
//		cout <<"Не принадлежит" << endl;
//	}
//	else
//	{
//		cout << "Принадлежит" << endl;
//	}
//	
//
//
//	point.x = abs(point.x) + abs(point.y) / 2.F
	

		/*
		Задание №2
		Создать структуру Circle, содержащую одно поле типа int - радиус и второе поле типа Point - центр окружности.
		Создать и проинициализировать переменную типа Circle.
		Создать переменную типа Circle и проинзироватьициали ее данными введенными с клавиатуры.
		Вывести на экран данные, сохраненные в вышеобъявленных переменных.
		Даны две переменные типа Circle.
		Написать программу, которая определяет пересекаются ли окружности,
		описанные данными переменными.
		*/
//struct Point
//{
//	float x;
//	float y;
//};
//		struct Circle
//		{
//			int r;
//			Point point;
//		};
//		
//		int main()
//			
//		{
//			setlocale(0, "");
//		/*	Circle circle = { 5 ,{6 ,6} };
//			cin >> circle.r >> circle.point.x >> circle.point.y;
//				cout << circle.r << " " << circle.point.x << " " << circle.point.y << endl;*/
//				Circle circle1;
//				cin >> circle1.r >> circle1.point.x >> circle1.point.y;
//				Circle circle2;
//				cin >> circle2.r >> circle2.point.x >> circle2.point.y;
//				
//				int A = sqrt((circle2.point.x*circle2.point.x - circle1.point.x*circle1.point.x) + (circle2.point.y*circle2.point.y - circle1.point.y*circle1.point.y));
//				if (circle1.r + circle2.r < A)
//				{
//					cout << "Непересекутся" << endl;
//				}
//				else
//				{
//					cout << "Пересекутся" << endl;
//				}
/*
		Задание №3
		Создать перечисление (enum) Color, для хранения 7 цветов радуги.
		Создать структуру Triangle, содержащее поле типа Color
		и массив для хранения трех элементов типа int (длины сторон).
		Создать и проинициализировать переменную типа Triangle корректными данными.
		Вывести на экран данные, сохраненные в вышеобъявленной переменной.
		Значение поля Color вывести в текстовом виде. (использовать конструкцию switch).
		Рассчитать и вывести на экран периметр вышеобъявленного треугольника.
		int main()
		*/
         enum Color
		 {
			 red,
			 orange,
			 yelow,
			 green,
			 whiteblue,
			 blue,
			 purple
         };
		 struct Triangle
		 {
			 Color color;
			 int Array[3];
		 };



        int main()			
		{
            setlocale(0, "");

			Triangle triangle;
			int temp;
			cin >> temp >> triangle.Array[1] >> triangle.Array[2] >> triangle.Array[3];
			triangle.color = static_cast<Color>(temp);



/*
		Задание №4
		Создать массив из 20 элеметнов типа Point.
		Проинициализировать его точками со случайными значениями координат в пределах от 0 до 100.
		Выведите на экран координаты:
		- точки с наименьшей x координатой
		- двух точек, расстояние между которыми минимально.
		Задание №5
		Создать массив из 100 элементов типа Triangle.
		Проинициализировать его случайными значениями (длина стороны от 1 до 10).
		При инициализации проверять, что треугольник с такими длинами сторон может существовать.
		(Длина каждой стороны должна быть строго меньше длин суммы двух других сторон).
		Обработать полученный массив треугольников и вывести на экран следующую информацию:
		- вывести на экран все треугольники, периметр которых превышает значение, введенное с клавиатуры.
		Если подходящих треугольников нет, вывести соответствующее сообщение.
		- количество треугольников каждого цвета

		Задание №6
		Написать программу, которая проверяет правильность заданных значений даты.
		Дату хранить с использованием структуры.
		Тестовые данные				Ожидаемый результат
		1 1 1992					Дата корректна
		30 6 1992					Дата корректна
		31 7 1992					Дата коррентна
		31 9 1994					Дата некорректна
		32 1 1992					Дана некорректна
		1 13 1992					Дата некорректна
		29 2 1993					Дата некорректна
		29 2 2004					Дата корректна
		29 2 1900					Дата некоррентна
		29 2 2000					Дата корректна
		*/
}